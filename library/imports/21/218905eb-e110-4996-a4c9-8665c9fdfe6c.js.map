{"version":3,"sources":["assets\\scripts\\Star.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAM,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAAuC,6BAAY;IAAnD;QAAA,qEAoDC;QAnDG,2BAA2B;QAE3B,gBAAU,GAAG,CAAC,CAAC;QAEf,gBAAgB;QAChB,UAAI,GAAG,IAAI,CAAC;;IA8ChB,CAAC;IA5CG,0BAAM,GAAN;QACI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IAED,8BAA8B;IAC9B,wBAAI,GAAJ,UAAM,IAAI;QACN,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;IAC5B,CAAC;IAED,yBAAK,GAAL,UAAO,IAAI;QACP,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IAED,qCAAiB,GAAjB;QACI,qBAAqB;QACrB,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;QAChD,iBAAiB;QACjB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;QACnD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,4BAAQ,GAAR;QACI,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAClC,kBAAkB;QAClB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACzB,2CAA2C;QAC3C,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,qBAAqB;IACrB,0BAAM,GAAN,UAAQ,EAAE;QACN,uBAAuB;QACvB,IAAI,IAAI,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE;YAC5C,SAAS;YACT,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,OAAO;SACV;QACD,0BAA0B;QAC1B,IAAI,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;QAC9D,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC;IACnF,CAAC;IAhDD;QADC,QAAQ;iDACM;IAHE,SAAS;QAD7B,OAAO;OACa,SAAS,CAoD7B;IAAD,gBAAC;CApDD,AAoDC,CApDsC,EAAE,CAAC,SAAS,GAoDlD;kBApDoB,SAAS","file":"","sourceRoot":"/","sourcesContent":["const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewScript extends cc.Component {\r\n    // 星星和主角之间的距离小于这个数值时，就会完成收集\r\n    @property\r\n    pickRadius = 0;\r\n    \r\n    // 暂存 Game 对象的引用\r\n    game = null;\r\n\r\n    onLoad () {\r\n        this.enabled = false;\r\n    }\r\n\r\n    // use this for initialization\r\n    init (game) {\r\n        this.game = game;\r\n        this.enabled = true;\r\n        this.node.opacity = 255;\r\n    }\r\n\r\n    reuse (game) {\r\n        this.init(game);\r\n    }\r\n\r\n    getPlayerDistance () {\r\n        // 根据 player 节点位置判断距离\r\n        var playerPos = this.game.player.getCenterPos();\r\n        // 根据两点位置计算两点之间距离\r\n        var dist = this.node.position.sub(playerPos).mag();\r\n        return dist;\r\n    }\r\n\r\n    onPicked () {\r\n        var pos = this.node.getPosition();\r\n        // 调用 Game 脚本的得分方法\r\n        this.game.gainScore(pos);\r\n        // 当星星被收集时，调用 Game 脚本中的接口，销毁当前星星节点，生成一个新的星星\r\n        this.game.despawnStar(this.node);\r\n    }\r\n\r\n    // called every frame\r\n    update (dt) {\r\n        // 每帧判断和主角之间的距离是否小于收集距离\r\n        if (this.getPlayerDistance() < this.pickRadius) {\r\n            // 调用收集行为\r\n            this.onPicked();\r\n            return;\r\n        }\r\n        // 根据 Game 脚本中的计时器更新星星的透明度\r\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\r\n        var minOpacity = 50;\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\r\n    }\r\n}\r\n"]}